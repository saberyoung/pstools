"""############################################################################ 
2019/1/30 Start
A testing file
""" ############################################################################
from __future__ import print_function
from builtins import input
import argparse,time,sys,os
import pst
import logging
if os.path.exists('pstools.log'):os.remove('pstools.log')
logging.basicConfig(filename='pstools.log', \
                    level=logging.INFO,\
                    format='%(asctime)s.%(msecs)03d %(levelname)s %(module)s - %(funcName)s: %(message)s',\
                    datefmt='%Y-%m-%d %H:%M:%S')
for key in logging.Logger.manager.loggerDict:logging.getLogger(key).setLevel(logging.CRITICAL)
description = ">> PStools main algorithm"

if __name__ == "__main__":
    start_time = time.time()
    parser = argparse.ArgumentParser(description=description,\
                formatter_class=argparse.ArgumentDefaultsHelpFormatter)   
    parser.add_argument("-f", "--fits", dest="fits",help='healpix fits file')      
    parser.add_argument("-t", "--tel", dest="tel",help='telescope; multiple with ,')      
    parser.add_argument("-g","--gcn",action="store_true",\
                    dest='gcn',default=False,help='start pygcn to listen')  
    parser.add_argument("-s","--serve",dest='serve',help='serve pygcn to listen') 
    parser.add_argument("--server",dest='server',default='eApps',\
                            choices=['local','eApps','Atlantic_2','Atlantic_3','Linode'],\
                            help='serve pygcn to listen')     
    parser.add_argument("--port",dest='port',default='PUBLIC',\
                            choices=['PUBLIC','PRIVATE'],help='serve pygcn to listen')  

    args = parser.parse_args()
    #    
    _gcn = args.gcn    
    _serve = args.serve
    #
    _server = args.server
    _port = args.port

    '''schedule pointings'''
    if _serve:   
        # auto search
        # - serve gcn
        from gcn.cmdline import serve_main
        _s1,_s2 = pst.server.lvc_server(_server,_port)
        sys.exit(serve_main(args=[_serve,'--host', '%s:%s'%(_s1,_s2)]))

    if _gcn:
        # auto search
        # - listen gcn
        import gcn
        _s1,_s2 = pst.server.lvc_server(_server,_port)
        _info = 'auto mode: listening host:%s:port:%s'%(_s1,_s2)
        print('## %s'%_info)
        logging.info(_info)
        gcn.listen(handler = pst.autogcndef.process_gcn, host=_s1, port=_s2)

    else:
        # manual search
        _tel = args.tel
        if _tel is None:sys.exit('Error: option tel needed for man mode..')
        mapname = args.fits

        # read params
        _opts_list = {}
        for tel0 in _tel.split(','):
            _info = 'man mode with telescope:%s'%tel0
            print('## %s'%_info)
            logging.info(_info)
            arglist,optlist = pst.configure.config_init(tel0)           
            _opts_list['arg'] = arglist
            _opts_list[tel0] = optlist

        # define email content
        _opts_list['arg']['email']['emailsub']+='[offline]'
        _opts_list['arg']['email']['emailcontent']='offline GW search\n'
        _opts_list['arg']['phone']['phonecontent']='offline GW search\n'
        _opts_list['arg']['email']['files'] = []
        _opts_list['arg']['email']['images'] = []

        # decide prioritization method        
        _trigger,_mass,_dist,_ngal = eval(_opts_list['arg']['priorization']['trigger']),\
                                     eval(_opts_list['arg']['priorization']['mass']),\
                                     eval(_opts_list['arg']['priorization']['dist']),\
                                     eval(_opts_list['arg']['priorization']['number'])
        
        # if man mode, role=test
        _opts_list['arg']['email']['role'] = 'test'

        if _trigger or _mass or _dist or _ngal:                       
            print('Trigger search')           
            logging.info('with fits:%s'%mapname)
            if _trigger and mapname is None:mapname = input('specify an input map name:')
            pst.pstdef.main(mapname, _opts_list, 'man')

        else:
            print('Normal search')
            sys.exit('TBD')
