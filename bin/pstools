#!/usr/bin/env python

"""############################################################################
2019/1/30 Start version 0.1. Only module avaivale for call..
2019/3/27 version 0.2. add pstool.py. Init cookbook
2019/6/22 version 0.3. add slack.py. Possible for multiple telescopes, however limits their FoV composition
2019/9/17 version 0.4. use class
""" ############################################################################
from __future__ import print_function
from builtins import input
import argparse,time,sys,os,pst,gcn

start_time = time.time()
description = ">> PStools main algorithm"

if __name__ == "__main__":
    
    parser = argparse.ArgumentParser(description=description,\
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)   

    # mandatory
    parser.add_argument("mode",choices=[1,2,3,4,5,6,7],type=int,\
        help='PSTools mode: [1] Generate configuration; '+\
            '[2] Check configuration; [3] Modify configuration; '+\
            '[4] Serve alert; [5] Monitor alert; '+\
            '[6] Offline alert; [7] Web tutorial; '+\
            '[8] covert txt to npz')

    # optional
    parser.add_argument("-f", dest="fits",\
        help='handle healpix fits file or xml voevent')   
    parser.add_argument("-i", dest="files",\
        help='txt files')      
    parser.add_argument("-t", dest="tel",\
        help='specific telescopes, if multiple divided with `,`')
    parser.add_argument("-x",dest='xml',\
        help='xml file that would be served locally')
    parser.add_argument("-s", dest='server',\
        default='eApps',choices=['local','eApps',\
        'Atlantic_2','Atlantic_3','Linode'],\
        help='GCN server')     
    parser.add_argument("-p", dest='port',\
        default='PUBLIC',choices=['PUBLIC','PRIVATE'],\
        help='GCN port')
    parser.add_argument("-v", dest="verbose",\
        default=False,action="store_true",\
        help='Enable task progress report')  
    parser.add_argument("-l", dest="log",\
        default=False,action="store_true",\
        help='Recording task progress report')

    # read parameters
    args = parser.parse_args()
    _mode = args.mode
    _log = args.log
    _verbose = args.verbose
    _server, _port = args.server, args.port

    if _log: # if record
        import logging
        if os.path.exists('pstools.log'):os.remove('pstools.log')
        logging.basicConfig(filename='pstools.log', \
            level=logging.INFO,format='%(asctime)s.%(msecs)03d '+\
            '%(levelname)s %(module)s - %(funcName)s: %(message)s',\
            datefmt='%Y-%m-%d %H:%M:%S')
        for key in logging.Logger.manager.loggerDict:
            logging.getLogger(key).setLevel(logging.CRITICAL)
    
    if _mode == 1:  # - generate configuration
        if args.tel is None:
            arglist,optlist = pst.load_config()
            _tell = arglist['react']['telescope']
            if len(_tell)==0:
                sys.exit('### Error: option tel wrong ...')
        else: _tell = args.tel
        for _tel in _tell.split(','): 
            _cfile,arglist,optlist = pst.load_config(_tel,_cfile=True)
            if _cfile: 
                for _cfilei in _cfile:
                    print ('- %s configuration: %s'%(_tel,_cfilei))
                    pst.gen_config(_cfilei)

    elif _mode == 2:  # - check file
        if args.tel is None:
            arglist,optlist = pst.load_config()
            _tell = arglist['react']['telescope']
            if len(_tell)==0: 
                sys.exit('### Error: option tel wrong ...')
        else: _tell = args.tel
        for _tel in _tell.split(','): 
            print('- %s configuration:'%_tel)
            arglist,optlist = pst.load_config(_tel,\
                            _verbose=True,_check=True)
            print('\t--> OK\n')

    elif _mode == 3:  # - show configuration
        if args.tel is None:
            arglist,optlist = pst.load_config()
            _tell = arglist['react']['telescope']
            if len(_tell)==0:
                sys.exit('### Error: option tel wrong ...')
        else: _tell = args.tel
        _dict,_cfilel = {},{}
        for _tel in _tell.split(','): 
            _dict[_tel] = {}
            _cfile,arglist,optlist = pst.load_config(_tel,\
                            _verbose=_verbose, _cfile=True)
            _dict[_tel]['general'],_dict[_tel]['telescope']=\
                                                arglist, optlist
            _cfilel[_tel] = _cfile
        for _tel in _dict:
            for _num,_nn in enumerate(['general','telescope']):
                answ = input('Modify %s-%s file? (Y/N)'%(_tel,_nn))
                if answ == 'Y':
                    _odict = pst.choose(_dict[_tel][_nn])
                    pst.modify_config(_cfilel[_tel][_num],_odict)

    elif _mode == 4:    # - serve alert
        from gcn.cmdline import serve_main
        if args.server != 'local':
            sys.exit('Only local server can be served')
        if args.xml is None:
            sys.exit('Pls specify a XML file to serve')
        _s1,_s2 = pst.lvc_server(_server, _port, _verbose)
        _info = 'Serve Mode:\thost:%s:port:%s'%(_s1,_s2)
        if _verbose: print('## %s'%_info)
        if _log: logging.info(_info)
        sys.exit(serve_main(args=[args.xml,'--host', '%s:%s'%(_s1,_s2)]))

    elif _mode == 5:  # - auto listen
        _s1,_s2 = pst.lvc_server(_server, _port, _verbose)
        _info = 'Monitor mode: listening host:%s:port:%s'%(_s1,_s2)
        if _verbose: print('## %s'%_info)
        if _log: logging.info(_info)
        gcn.listen(handler = pst.process_gcn, host=_s1, port=_s2)

    elif _mode == 6:  # - manual search   
        pst.man_search(args.fits, args.tel, _verbose, _log)

    elif _mode == 7:  # - web tutorial
        if _verbose: print ('https://pstool-cookbook.readthedocs.io/en/latest/')        
        try:
            import webbrowser
            _html = '%s/../../docs/_build/html/index.html'%pst.__path__[0]
            webbrowser.open(_html, new=2)
        except: pass

    elif _mode == 8:  # - file convert
        if _verbose: 
            print ('for each file, need 4 columns, '+\
                   'i.e. ra, dec, fov1, fov2, split in space')
        ra,dec,fov1,fov2 = [],[],[],[]
        for f in read_filelist(flist):
            for i in open(f).readlines():
                try:ra.append(float(i[0]))
                except:ra.append(Null)
                try:dec.append(float(i[1]))
                except:dec.append(Null)
                try:fov1.append(float(i[2]))
                except:fov1.append(Null)
                try:fov2.append(float(i[3]))
                except:fov2.append(Null)
        np.savez(cachefile,ra=ra,dec=dec,fovw=fovw1,fovh=fov2)
        print ('%s generated'%cachefile)

print("-"*80)
print('>>>>> Completed in '+str(int(time.time()-start_time))+' sec\n')
